import java.util.Deque;
import java.util.LinkedList;
import java.util.Queue;
import java.util.stream.Stream;

public class DataStrucures {
	public static boolean solve() {
		String str="([{}])";
		Deque<Character> stack=new LinkedList<Character>();
		for (int i = 0; i < str.length(); i++)
	    {
	        char current = str.charAt(i);
	        if (current == '{' || current == '(' || current == '[')
	        {
	            stack.push(current);
	        }

	        if (current == '}' || current == ')' || current == ']')
	        {
	            if (stack.isEmpty())
	                return false;
	           
	            char last=stack.poll();
	            if (current == '}' && last == '{' || current == ')' && last == '(' || current == ']' && last == '[')
	                continue;
	            else 
	                return false;
	        }

	    }

	        return stack.isEmpty();
	}
	private static void balanced(String input) {
	     input.chars().filter(current->).forEach(System.out::println);
	}
	public static void main(String[] args) {
		System.out.println(solve());
		
		System.out.println(balanced(""));
	}
}
