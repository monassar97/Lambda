import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import java.util.stream.Collectors.*;
import java.util.stream.Stream;

public class MainApplication {
	static Student[] students=new Student[] {
			Student.student("Ahmad",20,Gender.MALE,true,Course.MATH,Course.PHYSICS),
			Student.student("Mohammad",25,Gender.MALE,true,Course.JAVA,Course.MATH),
			Student.student("Esa",27,Gender.MALE,false,Course.ENGLISH,Course.JAVA),
			Student.student("Esra",19,Gender.FEMALE,true,Course.PHYSICS,Course.MATH),
			Student.student("Dana",40,Gender.FEMALE,true,Course.ENGLISH,Course.MATH),
			Student.student("Ruba",22,Gender.FEMALE,true,Course.CHEMISTRY,Course.PHYSICS)
	}; 
	public static void main(String[] args) {
		//System.out.println(active());
		//System.out.println(activeAndMale());
		//activeAndMale().forEach(System.out::println);
		System.out.println(activeAndHavaMathCourseOrPysicsCourse());
		System.out.println(numberOfStudentInCourse());
		System.out.println(courses());
	}
	public static List<Student> active(){
		return Stream.of(students).filter(Student::isActive).collect(Collectors.toList());
	}
	public static List<Student> activeAndMale(){
		return Stream.of(students).filter(student->student.isActive()).filter(student->student.getGender().equals(Gender.MALE)).map(student->student).collect(Collectors.toList());
		
	}
	public static List<Student> activeAndHavaMathCourseOrPysicsCourse(){

		return Stream.of(students).filter(Student::isActive).
				filter(student->student.getCourses()
						.contains(Course.MATH)||student.getCourses()
						.contains(Course.PHYSICS))
				.collect(Collectors.toList());
	}
	public static Map<Course, Long> numberOfStudentInCourse(){
		
		return Stream.of(students).flatMap(student->student.getCourses().stream())
				.collect(Collectors.groupingBy(c->c,Collectors.counting()));
	}
	public Map<Course, List<Student>> groupStudentByCourse(){
		Map<Course, List<Student>> map=new HashMap<Course, List<Student>>();
		List<Course> courses=courses();
		for(int i=0;i<students.length;i++) {
			List<Course> stCourses=students[i].getCourses();
			List <Student> students2=new LinkedList<Student>();
			Stream.of(students).filter(Student::isActive);
		}
		return map;
		
	}
	public static List<Course> courses(){
		return Stream.of(students).filter(st->st.getAge()>30).flatMap(st->st.getCourses().stream())
				.distinct().collect(Collectors.toList());
	}
	
}
