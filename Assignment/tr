Functional programming .
partial functions . for example !=0
optional .
f(g(x))
g domain
f domain is g co domain
pure function does not append on outer value. easy to test .scope depend on it self.
and does not has any side effect.and depend on it own parameters and dont define any other variables .test one time .
non pure function .
if interface has only one abstract method is functional interface @FunctionalInterface .
java lambda
"Scala"
AddFive func=x->x+5;
AddFive func=(int x)->{return x+5;};

MyFunction<Integer, MyFunction<Integer, MyFunction<Integer, Integer>>> test=x->y->z->(x+y+z);
		System.out.println(test.apply(5).apply(6).apply(9));

Higher oreder function : that take function or recieve function .
---------------------------------------------------------------------------------------------------
Predicate any type param return boolean
Supplier no param return
Efftet(Consumer) param no return

currying and uncurrying .

T->U->V
x->another.apply(apply(x));
.apply().apply()//if x->y->x+y;
f1.compose(f2) //if <INt>-> <>
---------------------------------------------------------------------------------------------------

Stream;
Stream.of(elements);
.forEach(Consumer);

.forEach(System.out::println);
.forEach(stu->System.out.println(stu));


for each istermination method the others are intermediate methods

Optional.empty()
Optional.of()
reduce same as sum
functional List // is a plus
TCE or TCO
take call elemenation
java.util.function
----------------------------
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.OptionalDouble;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Collectors.*;
import java.util.stream.Stream;

public class MainApplication {
	static Student[] students=new Student[] {
			Student.student("Ahmad",20,Gender.MALE,true,Course.MATH,Course.PHYSICS),
			Student.student("Mohammad",25,Gender.MALE,true,Course.JAVA,Course.MATH),
			Student.student("Esa",27,Gender.MALE,false,Course.ENGLISH,Course.JAVA),
			Student.student("Esra",19,Gender.FEMALE,true,Course.PHYSICS,Course.MATH),
			Student.student("Dana",40,Gender.FEMALE,true,Course.ENGLISH,Course.MATH),
			Student.student("Ruba",22,Gender.FEMALE,true,Course.CHEMISTRY,Course.PHYSICS)
	}; 
	public static void main(String[] args) {
		System.out.println(activeAndHaveMathCourseOrPysicsCourse());
		System.out.println(numberOfStudentInCourse());
		System.out.println(groupStudentsByAge());
		System.out.println(groupStudentsByGender());
		in();
		in2();
System.out.println(reduceAsList());
	System.out.println(getMax());
	}
	public static List<Student> active(){
		return Stream.of(students).filter(Student::isActive).collect(Collectors.toList());
	}
	public static List<Student> activeAndMale(){
		return Stream.of(students).filter(student->student.isActive())
				.filter(student->student.getGender()
						.equals(Gender.MALE)).map(student->student)
				.collect(Collectors.toList());
		
	}
	public static List<Student> activeAndHaveMathCourseOrPysicsCourse(){

		return Stream.of(students).filter(Student::isActive).
				filter(student->student.getCourses()
						.contains(Course.MATH)||student.getCourses()
						.contains(Course.PHYSICS))
				.sorted((st1,st2)->st1.getName().compareTo(st2.getName()))
				.collect(Collectors.toList());
	}
	public static Map<Course, Long> numberOfStudentInCourse(){
		
		return Stream.of(students).flatMap(student->student.getCourses().stream())
				.collect(Collectors.groupingBy(c->c,Collectors.counting()));
	}
	public static Map<Integer, Long> groupStudentsByAge(){
		
		return Stream.of(students).map(student->student.getAge())
				.collect(Collectors.groupingBy(c->c,Collectors.counting()));
	}
	public static Map<Gender, Long> groupStudentsByGender(){
		
		return Stream.of(students).map(student->student.getGender())
				.collect(Collectors.groupingBy(c->c,Collectors.counting()));
	}
	Course[] list=Course.values();
	public Map<Course, List<Student>> groupStudentByCourse(){
		return Stream.of(students).reduce((new HashMap()<Course,List<Student>>()),
				(map,student)->{
					students.getCourse().stream().forEach(c->map.get());
					return myList;
				})
				;
		
	}
	public static List<Course> courses(){
		return Stream.of(students).filter(st->st.getAge()>30)
				.flatMap(st->st.getCourses().stream())
				.collect(Collectors.toList());
	}
	public static void in() {
		OptionalDouble d= IntStream.range(0, 10).filter(x->x%2==0).average();
		System.out.println(d);
	}
	public static void in2() {
		int reduce=IntStream.range(1, 10).reduce(1,(a,b)->a*b);
		System.out.println(reduce);
	}
	public static List<Student> reduceAsList(){
		return Stream.of(students).reduce(new ArrayList<Student>(),
				(myList,student)->{
					(myList).add(student);
					return myList;
				}
				,(a,b)->{
					a.addAll(b);
					return a;
				});
	}
	public static Student getMax() {
		return Stream.of(students)
				.reduce(students[0]
						,(st1,st2)->(st1.getAge()>st2.getAge()?st1:st2));
	}
	//public static int getmx() {
		//int min=IntStream.reduce(IntStream.range(1, 10),(a,b)->a>b?a:b);
	//}
	
}

----------------------------------
Generics 10-12-2019 .,.,.,.,.,.,.,.,

?super E.

PECS

produce('input') extend -> T -> U -> ?extend V
consume('output') super -> T -> ?superU -> V
?extends just for read values not for modification.
?super too add value on it.
